name: Comprehensive Test Suite

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  # Backend Node.js Testing
  backend-tests:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18.x, 20.x]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run backend tests
      run: |
        npm run test:backend
        npm run test:coverage
    
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage/lcov.info
        flags: backend
        name: backend-coverage

  # Frontend React Testing
  frontend-tests:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18.x, 20.x]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
    
    - name: Install dependencies
      run: |
        npm ci
        cd client && npm ci
    
    - name: Run frontend tests
      run: |
        cd client
        npm run test:coverage -- --coverage --watchAll=false
    
    - name: Upload frontend coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./client/coverage/lcov.info
        flags: frontend
        name: frontend-coverage

  # Python Video Detection Testing
  python-tests:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.9, 3.10, 3.11]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install system dependencies for OpenCV
      run: |
        sudo apt-get update
        sudo apt-get install -y libgl1-mesa-glx libglib2.0-0
    
    - name: Install Python dependencies
      run: |
        cd stream-detection
        pip install -r requirements-test.txt
    
    - name: Run Python tests
      run: |
        cd stream-detection
        pytest test_video_detection.py -v --cov=. --cov-report=xml
    
    - name: Upload Python coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./stream-detection/coverage.xml
        flags: python
        name: python-coverage

  # Integration Testing
  integration-tests:
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests, python-tests]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Use Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
    
    - name: Install dependencies
      run: |
        npm ci
        cd client && npm ci
    
    - name: Start backend server
      run: |
        npm start &
        sleep 10
    
    - name: Run integration tests
      run: |
        npm run test:integration
    
    - name: Test API endpoints
      run: |
        curl -f http://localhost:3001/api/health || exit 1

  # Code Quality Checks
  code-quality:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Use Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
    
    - name: Install dependencies
      run: |
        npm ci
        cd client && npm ci
    
    - name: Run ESLint
      run: |
        npm run lint
        cd client && npm run lint
    
    - name: Run Prettier check
      run: |
        npm run format:check
        cd client && npm run format:check
    
    - name: Check TypeScript types
      run: |
        cd client
        npm run type-check

  # Security Scanning
  security-scan:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Use Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run security audit
      run: npm audit --audit-level=moderate
    
    - name: Run Snyk security scan
      uses: snyk/actions/node@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --severity-threshold=high

  # Build and Deploy (on main branch only)
  build-deploy:
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests, python-tests, integration-tests, code-quality, security-scan]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Use Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
    
    - name: Install dependencies
      run: |
        npm ci
        cd client && npm ci
    
    - name: Build frontend
      run: |
        cd client
        npm run build
    
    - name: Build backend
      run: npm run build
    
    - name: Deploy to staging
      run: |
        echo "Deploying to staging environment..."
        # Add your deployment commands here
    
    - name: Notify deployment
      run: |
        echo "âœ… All tests passed! Ready for deployment."
        echo "ðŸš€ Application built successfully"
        echo "ðŸ“Š Test coverage reports generated"
        echo "ðŸ”’ Security scans completed" 